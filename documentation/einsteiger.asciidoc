Programmieren mit Tcl. Erste Schritte.
======================================
Frank Hofmann
:subtitle:
:doctype: book
:copyright: Frank Hofmann
:revnumber: 1.2
:Author Initials: FH
:edition: 1
:lang: de
:date: 22. April 2022
:numbered:

= Vorwort =

Tcl als Scriptsprache. Einfach zu schreiben und kompakt, aber sehr 
mächtig und flexibel für den Alltag.

== Die 11 bzw. 12 Regeln von Tcl ==

Um die Skriptsprache Tcl zu verstehen, hilft es, sich zuerst die 11 bzw
12 Grundregeln von Tcl zu Gemüte zu führen.

Kommandos :: Ein Tcl-Skript ist eine Zeichenkette, die einen oder
mehrere Befehle enthält. Semikolons und Zeilenumbrüche sind
Befehlstrennzeichen, sofern sie nicht wie unten beschrieben in
Anführungszeichen gesetzt werden. Geschlossene Klammern sind
Befehlsabschlusszeichen bei der Befehlsersetzung (siehe unten), sofern
sie nicht in Anführungszeichen stehen.

Bewertung :: Ein Befehl wird stets in zwei Schritten ausgewertet.
Zunächst zerlegt der Tcl-Interpreter den Befehl in einzelne Wörter und
führt Ersetzungen wie unten beschrieben durch. Diese Ersetzungen werden
für alle Befehle auf die gleiche Art und Weise durchgeführt. Das erste
Wort wird verwendet, um eine Befehlsprozedur zu finden, die den Befehl
ausführt, dann werden alle Wörter des Befehls der Befehlsprozedur
zugewiesen. Der Befehlsprozedur steht es frei, jedes ihrer Wörter auf
beliebige Weise zu interpretieren, beispielsweise als Ganzzahl,
Variablenname, Liste oder Tcl-Skript. Verschiedene Befehle
interpretieren ihre Wörter unterschiedlich.

Worte :: Die Wörter eines Befehls werden durch Leerzeichen getrennt
(außer bei Zeilenumbrüchen, die Befehlstrennzeichen sind).

Doppelte Anführungszeichen :: Wenn das erste Zeichen eines Wortes ein
Anführungszeichen (+"+) ist, wird das Wort durch das nächste doppelte
Anführungszeichen abgeschlossen. Wenn Semikolons, geschlossene Klammern
oder Leerzeichen (einschließlich Leerzeichen und Zeilenumbrüchen)
zwischen den Anführungszeichen auftauchen, werden sie als normale
Zeichen behandelt und in das Wort aufgenommen. Befehlsersetzung,
Variablenersetzung, Variablenersetzung und Backslash-Ersetzung werden
auf die Zeichen zwischen den Anführungszeichen wie unten beschrieben
durchgeführt. Die doppelten Anführungszeichen werden nicht als Teil des
Wortes beibehalten.

Klammern :: Wenn das erste Zeichen eines Wortes eine offene Klammer
(+{+) ist, dann wird das Wort durch die passende schließende Klammer
(+}+) abgeschlossen. Klammern lassen sich auch innerhalb eines Wortes
verschachteln: Für jede weitere offene Klammer muss eine eine weitere
schließende Klammer existieren. Wenn jedoch eine offene oder schließende
Klammer innerhalb einer Klammer innerhalb des Wortes mit einem
umgekehrten Schrägstrich versehen ist, wird sie bei der Suche nach der
der passenden schließenden Klammer ignoriert). Für die Zeichen zwischen
den geschweiften Klammern werden keine Ersetzungen vorgenommen. Zeichen
zwischen den geschweiften Klammern werden nicht ersetzt, mit Ausnahme
der nachfolgend beschriebenen Ersetzung von Backslash und Kombination
aus Zeilenumbruch und Semikolon, Zeilenumbruch, geschlossene Klammern
oder Leerzeichen/Leerzeichen erhalten keine spezielle Interpretation.
Das Wort besteht aus genau den Zeichen zwischen den äußeren geschweiften
Klammern ohne Berücksichtigung der Klammern selbst.

Kommandoersetzung :: Wenn ein Wort eine offene Klammer (+[+) enthält,
führt Tcl eine Kommandoersetzung durch. Dazu ruft es den Tcl-Interpreter
rekursiv auf, um die auf die offene Klammer folgenden Zeichen als
Tcl-Skript zu verarbeiten. Das Skript kann eine beliebige Anzahl von
Befehlen enthalten und muss mit einer schließenden Klammer (+]+)
abgeschlossen werden.
+
Das Ergebnis des Skripts (d. h. das Ergebnis des letzten Befehls) wird
anstelle der Klammern und aller dazwischen liegenden Zeichen in das Wort
eingesetzt. Ein einzelnes Wort kann beliebig viele Kommandoersetzungen
enthalten. In geschweiften Klammern eingeschlossene Wörter werden nicht
ersetzt.

Variablenersetzung :: Wenn ein Wort ein Dollar-Zeichen (+$+) enthält,
führt Tcl eine Variablensubstitution: das Dollar-Zeichen und die
folgenden Zeichen werden in dem Wort durch den Wert einer Variablen
ersetzt. Variable Substitution kann eine der folgenden Formen annehmen:

----
$name
----

Name ist der Name einer skalaren Variablen; der Name ist eine Folge von
einem oder mehreren Zeichen, die ein Buchstabe, eine Ziffer, ein
Unterstrich oder ein Namensraumtrennzeichen (zwei oder mehr
Doppelpunkte) sind.

----
$name(index)
----

`name` ist der Name einer Array-Variablen und `index` ist der Name
eines Elements innerhalb dieses Arrays. Name darf nur Buchstaben,
Ziffern, Unterstriche und Namespace-Trennzeichen enthalten und kann eine
leere Zeichenkette sein. Ersetzungen von Befehlen, Variablen und
Backslashes werden an den Zeichen vor `index` vorgenommen.

----
${name}
----

Name ist der Name einer skalaren Variablen. Dieser kann beliebige
Zeichen enthalten, mit Ausnahme von geschweiften Klammern. Es kann eine
beliebige Anzahl von Variablenersetzungen in einem einzigen Wort
enthalten. Die Variablenersetzung wird nicht durchgeführt bei Wörtern,
die in geschweiften Klammern stehen.

Backslash-Ersetzung :: Wenn ein Backslash (+\+) innerhalb eines Wortes
erscheint, erfolgt eine Backslash-Ersetzung. In allen Fällen außer den
unten beschriebenen wird der Backslash weggelassen und das folgende
Zeichen wird als ein normales Zeichen behandelt und in das Wort
aufgenommen. Dies erlaubt, dass Zeichen wie doppelte Anführungszeichen,
geschlossene Klammern und Dollarzeichen in Wörter eingefügt werden,
ohne eine spezielle Verarbeitung auszulösen. Die nachfolgende Tabelle
listet die Backslash-Sequenzen auf, die speziell behandelt werden,
zusammen mit dem Wert, der die einzelnen Sequenzen ersetzt:

[frame="topbot",options="header",id="tab.backslashSubstitution"]
|====
| Zeichen  | Aktion
| +\a+ | Audible alert (bell) (0x7).
| +\b+ | Backspace (0x8).
| +\f+ | Form feed (0xc).
| +\n+ | Newline (0xa).
| +\r+ | Carriage-return (0xd).
| +\t+ | Tab (0x9).
| +\v+ | Vertical tab (0xb).
| +\<newline>whiteSpace+ | Ein einzelnes Leerzeichen ersetzt den
Backslash, den Zeilenumbruch und alle Leerzeichen und Tabulatoren nach
dem Zeilenumbruch. Diese Backslash-Sequenz ist einzigartig, da sie in
einem separaten Vorlauf ersetzt wird, bevor der Befehl tatsächlich
geparst wird. Das bedeutet, dass sie ersetzt, auch wenn sie zwischen
geschweiften Klammern steht, und das resultierende Leerzeichen wird wie
ein Worttrennzeichen behandelt, wenn es nicht in geschweiften Klammern
oder Anführungszeichen steht.
| +\\+ | Literal backslash (+\+), Kein besonderer Effekt.
| +\ooo+ | Die Ziffern ooo (eine, zwei oder drei davon) geben einen
Acht-Bit Oktalwert für das Unicode-Zeichen, das eingefügt werden soll.
Die oberen Bits des Unicode-Zeichens sind 0.
| +\xhh+ | Die hexadezimalen Ziffern +hh+ geben einen
Acht-Bit-Hexadezimalwert für das einzufügende Unicode-Zeichen an.
Eine beliebige Anzahl von hexadezimalen Ziffern können vorhanden sein;
allerdings werden alle bis auf die letzten beiden ignoriert (das
Ergebnis ist immer eine Ein-Byte-Menge). Die oberen Bits des des
Unicode-Zeichens sind 0.
| +\uhhhh+ | Die hexadezimalen Ziffern +hhhh+ (eine, zwei, drei oder
vier davon ) geben einen hexadezimalen Sechzehn-Bit-Wert für das
Unicode-Zeichen das eingefügt werden soll.
|====

Kommentare :: Wenn ein Hash-Zeichen (+#+) an einer Stelle erscheint, an
der Tcl das erste Zeichen des ersten Wortes eines Befehls erwartet, dann
werden das Hash-Zeichen und die darauf folgenden Zeichen bis zum
nächsten Zeilenumbruch, als Kommentar behandelt und ignoriert. Das
Kommentarzeichen hat nur Bedeutung, wenn es am Anfang eines Befehls
steht.

Ersetzungsreihenfolge :: Jedes Zeichen wird genau einmal von dem
Tcl-Interpreter verarbeitet, um die Wörter eines Befehls zu erzeugen.
Zum Beispiel, Wenn eine Variablensubstitution stattfindet, werden keine
weiteren Ersetzungen am Wert der Variable vorgenommen; der Wert wird
wortwörtlich in das Wort eingefügt. Wenn eine Befehlssubstitution
stattfindet, wird der verschachtelte Befehl der vollständig durch den
rekursiven Aufruf des Tcl-Interpreters verarbeitet; es werden keine
Substitutionen vor dem rekursiven Aufruf durchgeführt und keine keine
zusätzlichen Ersetzungen am Ergebnis des verschachtelten Skripts
durchgeführt. Die Substitutionen erfolgen von links nach rechts, und
jede Substitution wird vollständig ausgewertet, bevor versucht wird, die
nächsten auszuwerten. So wird eine Sequenz wie

----
set y [set x 0][incr x][incr x]
----

stets die Variable `y` auf den Wert `012` setzen.

Ersetzung und Wortgrenzen:: Substitutionen haben keinen Einfluss auf die
Wortgrenzen eines Befehls. Zum Beispiel wird bei einer
Variablenersetzung der gesamte Wert der Variable Teil eines einzigen
Wortes, auch wenn der Wert der Variable Leerzeichen enthält.

== Entwicklungsumgebung und Ausführung ==

=== Windowing Shell (+wish+) ===

* Bestandteil des Tcl/Tk-Pakets
* besteht aus Kommandozeilenfenster ('Konsole') und dem graphischen
Darstellungsfenster ('Display')

==== Interpreter 'tclsh' ====

* Aufruf im Terminal:

----
$ tclsh
%
----

* "Hallo, Welt"-Programm in der +tclsh+

----
% puts "Hallo, Welt :)"
Hallo, Welt :)
%
----

==== Interpreter mit graphischer Darstellung 'wish' ====

* Aufruf im Terminal:

----
$ wish
%
----

* "Hallo, Welt"-Programm in der +wish+

----
% message .msg -text "Hallo, Welt!"
% pack .msg
----

image::helloworld-wish.png[id="fig.helloworld-wish"]

=== Bearbeitung über einen Texteditor ===

* speichern als Textdatei
* Name und Erweiterung sind vollkommen unerheblich
* hier verwendete Schreibweise: +datei.tcl+

----
#! /usr/bin/wish

# define string variable with content
set message "Hello, World!"

# output message on UNIX channel stdout
puts stdout $message

----

* setzen des Flags "ausführbar":

----
chmod +x hello-world.tcl
----

* Ausführung über die Shell:

----
./hello-world.tcl
----

== Name, Historie, Programmaufbau und Struktur ==

=== Name ===

* Tcl ist eine Abkürzung und steht für Tool Command Language. 
* Tk ist ebenfalls eine Abkürzung und steht für Toolkit.
** Programmierung graphischer Benutzeroberflächen
** plattformübergreifend verfügbar (soweit graphische Benutzeroberfläche
vorhanden)
** Anbindung u.a. zu Perl (Perl/Tk), Python (Python/Tk) und Ruby
** verleiht den Programmen ein eigenes, unverwechselbares Aussehen

=== Historie ===

Tcl ist entstanden etwa 1988 mit den Zielen:

* Simulation von Schaltkreisen
* sollte neben Java eine der Websprachen werden

=== Grundgedanken ===

Tcl folgt diesen Grundgedanken:

* eine Skriptsprache wie bash, Perl, Python und PHP 
* Übersetzung zur Ausführung/Laufzeit
* eine Interpretersprache (tclsh, wish)
* vereinfachte Vearbeitung von Listen und Arrays mit vielfältigen
Funktionen
* alles ist ein String und wird je nach Kontext interpretiert und
umgewandelt
** alle Datentypen können als String bearbeitet werden
** gilt auch für die Verarbeitung des Programmcodes (nützlich zur
Evaluierung von Programmcode zur Laufzeit)


=== Schreibweise ===

* Schreibweise aller Aufrufe erfolgt durchgängig in polnischer Notation

----
Kommando Parameter Parameter ...
----

* ein Kommando endet entweder mit einem Semikolon oder einem Zeilenende
* steht ein Backslash am Zeilende, wird das Kommando auf der nächsten
Zeile fortgesetzt

----
set message [ command -option1 45 \
-option2 60 -option3 95 ] 
----

* geschweifte Klammern schützen den Inhalt vor der Interpretation (von
außen nach innen)

* Code in eckigen Klammern wird zuerst ausgeführt
** Auswertung von innen nach außen
** darf mehrfach geschachtelt werden

----
puts [ gets filepointer ]
----

* Kommentare beginnen mit einem Hashtag +#+

== Variablen und Bezeichner ==
 
* Deklaration von Variablen über +set+ ohne Typangabe (dynamische
Typisierung)

----
set radius 45
set tax19 1.19
set tax7 1.07
----

* Zugriff auf Variablen über +$Variablenname+

----
puts $radius
----

* als Bezeichner sind Buchstaben, Ziffern und Sonderzeichen wie _ erlaubt 
* Variablen sind nur lokal gültig
** Gültigkeitsbereich muß jeweils explizit erweitert werden
** Kommandos: +global+, +upvar+, +uplevel+

* Zeichenketten stehen in doppelten Anführungszeichen

== Listen und Arrays ==

=== Liste ===

Menge von Werten beliebigen Inhalts und Typs, Indexierung beginnt mit 0

----
set cities "Lyon Metz Nancy Belfort Pontarlier"
----

Listenfunktionen (Auswahl):

* +lappend+: ein Element ans Ende der Liste anfügen
* +lreplace+: ein oder mehrere Listenelemente ersetzen
* +lsearch+: innerhalb der Liste suchen
* +linsert+: ein Element in der Liste einfügen
* +concat+: zwei oder mehrere Listen verketten
* +lindex+: ein Element anhand dessen Index auswählen
* +lrange+: einen Bereich der Liste auswählen
* +llength+: die Anzahl Elemente der Liste ermitteln

=== Assoziatives Array === 

wie eine Liste, jedoch mit String als Index anstatt von Integerwerten.
In anderen Programmiersprachen bekannt als Hashtabelle.

----
# Definition
set adresse(name) "Willi Weber"
set adresse(strasse) "Elbchaussee 4"
set adresse(ort) "Hamburg Altona"
set adresse(plz) 22765

# Auswahl
puts $adresse(name)
puts $adresse(strasse)
puts $adresse(ort)
puts $adresse(plz)
----

Arrayfunktionen (Auswahl):

* +get+: Rückgabe einer Liste, die zwischen dem Index und dem Feldwert
wechselt
* +names+: Rückgabe aller Indizes, die in dem Array definiert sind
* +size+: die Anzahl Elemente in dem Array

== Schleifen ==

* +for+-Schleife

----
# define a for loop from 1 to 10 step 3
for {set i 1} {$i <= 10} {incr i 3} {
	puts "value: $i"
}
----

* +foreach+-Schleife

----
# Definition
set address(name) "Willi Weber"
set address(road) "Elbchaussee 4"
set address(place) "Hamburg Altona"
set address(zip) 22765

# Auswahl Feld für Feld
foreach item [array names address ] { \
	puts "${item}: $address($item)" \
}
----

* +while+-Schleife

----
set i 0

while {$i < 10} {

	# output odd values, only
	if {$i % 2 == 1} {
		puts $i
	}

	# increase counter
	incr i
}
----

* Verwendung von +break+ und +continue+
** +break+ beendet die gesamte Schleife (bricht deren Ausführung ab)
** +continue+ beendet nur den aktuellen Schleifendurchlauf und setzt mit
dem nächsten Schleifendurchlauf fort

== Entwicklung eigener Funktionen ==

* eigene Funktionsblöcke
* benannt mit einem Funktionsnamen (Bezeichner)
* Parameterliste ist optional

----
proc total {operand1 operand2} {
	# calculate a sum of two operands
	set c [expr $operand1 + $operand2]
	return $c
}
----

* Möglichkeit für Defaultwerte

----
proc total {{operand1 0} {operand2 0}} {
	# calculate a sum of two operands
	set c [expr $operand1 + $operand2]
	return $c
}
----

== Weiterführende Dokumente ==

* John Ousterhout: Tcl und Tk. Entwicklung grafischer
Benutzerschnittstellen für das X Window System, 1995, Addison-Wesley,
ISBN 3-89319-793-1
* Brent Welch: Praktisches Programmieren in Tcl und Tk, 1996, Prentice
Hall, München, ISBN 3-8272-9529-7
* Ulrich Cuber: Linux Scripting, 2001, Franzis' Verlag GmbH, Poing, ISBN
3-7723-7124-8
* Das Wikibook to Tcl, http://en.wikibooks.org/wiki/Tcl_Programming
* Uwe Berger: Client/Server mit Tcl, Workshop im Rahmen der Chemnitzer
Linux-Tage, 2010, http://www.bralug.de/wiki/BraLUG_auf_dem_CLT2010
* Frank Hofmann: GitHub-Repo mit ausführlichen Beispielen, https://github.com/hofmannedv/training-tcl
