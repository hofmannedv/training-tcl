Programmieren mit Tcl. Erste Schritte.
======================================
Frank Hofmann
:subtitle:
:doctype: book
:copyright: Frank Hofmann
:revnumber: 1.1
:Author Initials: FH
:edition: 1
:lang: de
:date: 3. Juni 2015
:numbered:

= Vorwort =

Tcl als Scriptsprache. Einfach zu schreiben und kompakt, aber sehr 
mächtig und flexibel für den Alltag.

== Die 11 bzw. 12 Regeln von Tcl ==

Commands :: A Tcl script is a string containing one or more commands.
Semi-colons and newlines are command separators unless quoted as
described below. Close brackets are command terminators during command
substitution (see below) unless quoted.

Evaluation :: A command is evaluated in two steps. First, the Tcl
interpreter breaks the command into words and performs substitutions as
described below. These substitutions are performed in the same way for
all commands. The first word is used to locate a command procedure to
carry out the command, then all of the words of the command are passed
to the command procedure. The command procedure is free to interpret
each of its words in any way it likes, such as an integer, variable
name, list, or Tcl script. Different commands interpret their words
differently.

Words :: Words of a command are separated by white space (except for
newlines, which are command separators).

Double quotes :: If the first character of a word is double-quote (+"+)
then the word is terminated by the next double-quote character. If
semi-colons, close brackets, or white space characters (including
newlines) appear between the quotes then they are treated as ordinary
characters and included in the word. Command substitution, variable
substitution, and backslash substitution are performed on the characters
between the quotes as described below. The double-quotes are not
retained as part of the word.

Braces :: If the first character of a word is an open brace (+{+) then
the word is terminated by the matching close brace (+}+). Braces nest
within the word: for each additional open brace there must be an
additional close brace (however, if an open brace or close brace within
the word is quoted with a backslash then it is not counted in locating
the matching close brace). No substitutions are performed on the
characters between the braces except for backslash-newline substitutions
described below, nor do semi-colons, newlines, close brackets, or white
space receive any special interpretation. The word will consist of
exactly the characters between the outer braces, not including the
braces themselves.

Command substitution :: If a word contains an open bracket (+[+) then
Tcl performs command substitution. To do this it invokes the Tcl
interpreter recursively to process the characters following the open
bracket as a Tcl script. The script may contain any number of commands
and must be terminated by a close bracket (+]+). 
+
The result of the script (i.e. the result of its last command) is
substituted into the word in place of the brackets and all of the
characters between them. There may be any number of command
substitutions in a single word. Command substitution is not performed on
words enclosed in braces.

Variable substitution :: If a word contains a dollar-sign (+$+) then Tcl
performs variable substitution: the dollar-sign and the following
characters are replaced in the word by the value of a variable. Variable
substitution may take any of the following forms:

----
$name
----

Name is the name of a scalar variable; the name is a sequence of one or
more characters that are a letter, digit, underscore, or namespace
separators (two or more colons)-

----
$name(index)
----

Name gives the name of an array variable and index gives the name of an
element within that array. Name must contain only letters, digits,
underscores, and namespace separators, and may be an empty string.
Command substitutions, variable substitutions, and backslash
substitutions are performed on the characters of index.

----
${name}
----

Name is the name of a scalar variable. It may contain any characters
whatsoever except for close braces. There may be any number of variable
substitutions in a single word. Variable substitution is not performed
on words enclosed in braces.

Backslash substitution :: If a backslash (+\+) appears within a word
then backslash substitution occurs. In all cases but those described
below the backslash is dropped and the following character is treated as
an ordinary character and included in the word. This allows characters
such as double quotes, close brackets, and dollar signs to be included
in words without triggering special processing. The following table
lists the backslash sequences that are handled specially, along with the
value that replaces each sequence.


[frame="topbot",options="header",id="tab.backslashSubstitution"]
|====
| character  | Action
| +\a+ | Audible alert (bell) (0x7).
| +\b+ | Backspace (0x8).
| +\f+ | Form feed (0xc).
| +\n+ | Newline (0xa).
| +\r+ | Carriage-return (0xd).
| +\t+ | Tab (0x9).
| +\v+ | Vertical tab (0xb).
| +\<newline>whiteSpace+ | A single space character replaces the
backslash, newline, and all spaces and tabs after the newline. This
backslash sequence is unique in that it is replaced in a separate
pre-pass before the command is actually parsed. This means that it will
be replaced even when it occurs between braces, and the resulting space
will be treated as a word separator if it isn't in braces or quotes.
| +\\+ | Literal backslash (+\+), no special effect.
| +\ooo+ | The digits ooo (one, two, or three of them) give an eight-bit
octal value for the Unicode character that will be inserted. The upper
bits of the Unicode character will be 0.
| +\xhh+ | The hexadecimal digits +hh+ give an eight-bit hexadecimal
value for the Unicode character that will be inserted. Any number of
hexadecimal digits may be present; however, all but the last two are
ignored (the result is always a one-byte quantity). The upper bits of
the Unicode character will be 0.
| +\uhhhh+ | The hexadecimal digits +hhhh+ (one, two, three, or four of
them) give a sixteen-bit hexadecimal value for the Unicode character
that will be inserted.
|====

Comments :: If a hash character (+#+) appears at a point where Tcl is
expecting the first character of the first word of a command, then the
hash character and the characters that follow it, up through the next
newline, are treated as a comment and ignored. The comment character
only has significance when it appears at the beginning of a command.

Order of substitution :: Each character is processed exactly once by the
Tcl interpreter as part of creating the words of a command. For example,
if variable substitution occurs then no further substitutions are
performed on the value of the variable; the value is inserted into the
word verbatim. If command substitution occurs then the nested command is
processed entirely by the recursive call to the Tcl interpreter; no
substitutions are performed before making the recursive call and no
additional substitutions are performed on the result of the nested
script. Substitutions take place from left to right, and each
substitution is evaluated completely before attempting to evaluate the
next. Thus, a sequence like

----
set y [set x 0][incr x][incr x]
----

will always set the variable y to the value, 012.

Substitution and word boundaries :: Substitutions do not affect the word
boundaries of a command. For example, during variable substitution the
entire value of the variable becomes part of a single word, even if the
variable's value contains spaces.

== Entwicklungsumgebung und Ausführung ==

=== Windowing Shell (+wish+) ===

* Bestandteil des Tcl/Tk-Pakets
* besteht aus Kommandozeilenfenster ('Konsole') und dem graphischen
Darstellungsfenster ('Display')
* Aufruf im Terminal:

----
$ wish
%
----

* "Hallo, Welt"-Programm in der +wish+

----
% message .msg -text "Hallo, Welt!"
% pack .msg
----

image::helloworld-wish.png[id="fig.helloworld-wish"]

=== Bearbeitung über einen Texteditor ===

* speichern als Textdatei
* Name und Erweiterung sind vollkommen unerheblich
* hier verwendete Schreibweise: +datei.tcl+

----
#! /usr/bin/wish

# define string variable with content
set message "Hello, World!"

# output message on UNIX channel stdout
puts stdout $message

----

* setzen des Flags "ausführbar":

----
chmod +x hello-world.tcl
----

* Ausführung über die Shell:

----
./hello-world.tcl
----

== Name, Historie, Programmaufbau und Struktur ==

=== Name ===

* Tcl ist eine Abkürzung und steht für Tool Command Language. 
* Tk ist ebenfalls eine Abkürzung und steht für Toolkit.
** Programmierung graphischer Benutzeroberflächen
** plattformübergreifend verfügbar (soweit graphische Benutzeroberfläche
vorhanden)
** Anbindung u.a. zu Perl (Perl/Tk), Python (Python/Tk) und Ruby
** verleiht den Programmen ein eigenes, unverwechselbares Aussehen

=== Historie ===

Tcl ist entstanden etwa 1988 mit den Zielen:

* Simulation von Schaltkreisen
* sollte neben Java eine der Websprachen werden

=== Grundgedanken ===

Tcl folgt diesen Grundgedanken:

* eine Skriptsprache wie bash, Perl, Python und PHP 
* Übersetzung zur Ausführung/Laufzeit
* eine Interpretersprache (tclsh, wish)
* vereinfachte Vearbeitung von Listen und Arrays mit vielfältigen
Funktionen
* alles ist ein String und wird je nach Kontext interpretiert und
umgewandelt
** alle Datentypen können als String bearbeitet werden
** gilt auch für die Verarbeitung des Programmcodes (nützlich zur
Evaluierung von Programmcode zur Laufzeit)


=== Schreibweise ===

* Schreibweise aller Aufrufe erfolgt durchgängig in polnischer Notation

----
Kommando Parameter Parameter ...
----

* ein Kommando endet entweder mit einem Semikolon oder einem Zeilenende
* steht ein Backslash am Zeilende, wird das Kommando auf der nächsten
Zeile fortgesetzt

----
set message [ command -option1 45 \
-option2 60 -option3 95 ] 
----

* geschweifte Klammern schützen den Inhalt vor der Interpretation (von
außen nach innen)

* Code in eckigen Klammern wird zuerst ausgeführt
** Auswertung von innen nach außen
** darf mehrfach geschachtelt werden

----
puts [ gets filepointer ]
----

* Kommentare beginnen mit einem Hashtag +#+

== Variablen und Bezeichner ==
 
* Deklaration von Variablen über +set+ ohne Typangabe (dynamische
Typisierung)

----
set radius 45
set tax19 1.19
set tax7 1.07
----

* Zugriff auf Variablen über +$Variablenname+

----
puts $radius
----

* als Bezeichner sind Buchstaben, Ziffern und Sonderzeichen wie _ erlaubt 
* Variablen sind nur lokal gültig
** Gültigkeitsbereich muß jeweils explizit erweitert werden
** Kommandos: +global+, +upvar+, +uplevel+

* Zeichenketten stehen in doppelten Anführungszeichen

== Listen und Arrays ==

=== Liste ===

Menge von Werten beliebigen Inhalts und Typs, Indexierung beginnt mit 0

----
set cities "Lyon Metz Nancy Belfort Pontarlier"
----

Listenfunktionen (Auswahl):

* +lappend+: ein Element ans Ende der Liste anfügen
* +lreplace+: ein oder mehrere Listenelemente ersetzen
* +lsearch+: innerhalb der Liste suchen
* +linsert+: ein Element in der Liste einfügen
* +concat+: zwei oder mehrere Listen verketten
* +lindex+: ein Element anhand dessen Index auswählen
* +lrange+: einen Bereich der Liste auswählen
* +llength+: die Anzahl Elemente der Liste ermitteln

=== Assoziatives Array === 

wie eine Liste, jedoch mit String als Index anstatt von Integerwerten.
In anderen Programmiersprachen bekannt als Hashtabelle.

----
# Definition
set adresse(name) "Willi Weber"
set adresse(strasse) "Elbchaussee 4"
set adresse(ort) "Hamburg Altona"
set adresse(plz) 22765

# Auswahl
puts $adresse(name)
puts $adresse(strasse)
puts $adresse(ort)
puts $adresse(plz)
----

Arrayfunktionen (Auswahl):

* +get+: Rückgabe einer Liste, die zwischen dem Index und dem Feldwert
wechselt
* +names+: Rückgabe aller Indizes, die in dem Array definiert sind
* +size+: die Anzahl Elemente in dem Array

== Schleifen ==

* +for+-Schleife
* +foreach+-Schleife

----
# Definition
set address(name) "Willi Weber"
set address(road) "Elbchaussee 4"
set address(place) "Hamburg Altona"
set address(zip) 22765

# Auswahl Feld für Feld
foreach item [array names address ] { \
	puts "${item}: $address($item)" \
}
----

* +while+-Schleife
* Verwendung von +break+ und +continue+

== Entwicklung eigener Funktionen ==

TBD

== Weiterführende Dokumente ==

* John Ousterhout: Tcl und Tk. Entwicklung grafischer
Benutzerschnittstellen für das X Window System, 1995, Addison-Wesley,
ISBN 3-89319-793-1
* Brent Welch: Praktisches Programmieren in Tcl und Tk, 1996, Prentice
Hall, München, ISBN 3-8272-9529-7
* Ulrich Cuber: Linux Scripting, 2001, Franzis' Verlag GmbH, Poing, ISBN
3-7723-7124-8
* Das Wikibook to Tcl, http://en.wikibooks.org/wiki/Tcl_Programming
* Uwe Berger: Client/Server mit Tcl, Workshop im Rahmen der Chemnitzer
Linux-Tage, 2010, http://www.bralug.de/wiki/BraLUG_auf_dem_CLT2010
* Frank Hofmann: GitHub-Repo mit ausführlichen Beispielen, https://github.com/hofmannedv/training-tcl
